{
  "stats": {
    "suites": 11,
    "tests": 23,
    "passes": 21,
    "pending": 0,
    "failures": 2,
    "start": "2023-11-26T19:52:21.245Z",
    "end": "2023-11-26T19:52:23.863Z",
    "duration": 2618,
    "testsRegistered": 23,
    "passPercent": 91.30434782608695,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "cede6829-9ffa-49ff-8b9b-1a35eeca1b74",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "110bc9c2-8815-4838-a3a0-837aaf6bbd0e",
          "title": "Bookstore",
          "fullFile": "C:\\Users\\sesko\\OneDrive\\Desktop\\demoqa\\test\\bookstore.test.js",
          "file": "\\test\\bookstore.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "906ccf18-7d61-47ee-b509-f8e3157df087",
              "title": "Get book, then add it successfully to user's favorites",
              "fullFile": "C:\\Users\\sesko\\OneDrive\\Desktop\\demoqa\\test\\bookstore.test.js",
              "file": "\\test\\bookstore.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Get book, then add it successfully to user's favorites\"",
                  "fullTitle": "Bookstore Get book, then add it successfully to user's favorites \"before all\" hook in \"Get book, then add it successfully to user's favorites\"",
                  "timedOut": false,
                  "duration": 876,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userName = 'tsvetan-iliev' + Math.floor(Math.random() * 100001);\npassword = 'Cesc123!';\nconst response = await createUser(userName, password);\ndata = response.data;\nstatus = response.status;",
                  "err": {},
                  "uuid": "ce7cee08-ff89-47dc-92dc-4ca6ce8f857c",
                  "parentUUID": "906ccf18-7d61-47ee-b509-f8e3157df087",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get books successfully",
                  "fullTitle": "Bookstore Get book, then add it successfully to user's favorites Get books successfully",
                  "timedOut": false,
                  "duration": 61,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await getBooks();\nassert.equal(response.status, 200, 'Status is not 200');\nassert.isArray(response.data.books, 'Data is not array');\nassert.isNotEmpty(response.data.books, 'Data is empty');\nbooks = response.data.books;\nbook = books[0];",
                  "err": {},
                  "uuid": "fb6c7aba-14ae-45ab-8363-7f545c9cead7",
                  "parentUUID": "906ccf18-7d61-47ee-b509-f8e3157df087",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Add book with valid isbn to user's favorites books list",
                  "fullTitle": "Bookstore Get book, then add it successfully to user's favorites Add book with valid isbn to user's favorites books list",
                  "timedOut": false,
                  "duration": 148,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const addedBookResponse = await addBook(\n    data.userID,\n    book.isbn,\n    userName,\n    password\n);\nassert.equal(addedBookResponse.status, 201, 'Status is not 201');\nassert.equal(\n    addedBookResponse.data.books[0].isbn,\n    book.isbn,\n    'Isbn is not correct'\n);",
                  "err": {},
                  "uuid": "0d8d890a-99d0-41bf-bfb9-a181eab4bb50",
                  "parentUUID": "906ccf18-7d61-47ee-b509-f8e3157df087",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Book is added to user favorites books list",
                  "fullTitle": "Bookstore Get book, then add it successfully to user's favorites Book is added to user favorites books list",
                  "timedOut": false,
                  "duration": 100,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await getUser(userName, password, data.userID);\nassert.equal(response.status, 200, 'Status is not 200');\nassert.isArray(response.data.books, 'Data is not array');\nassert.isNotEmpty(response.data.books, 'Data is empty');\nassert.equal(response.data.books.length, 1, 'Books count is not 1');\nassert.equal(\n    response.data.books[0].isbn,\n    book.isbn,\n    'Isbn is not correct'\n);",
                  "err": {},
                  "uuid": "fccad32b-9b08-42eb-8f32-37c680fe8bf3",
                  "parentUUID": "906ccf18-7d61-47ee-b509-f8e3157df087",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fb6c7aba-14ae-45ab-8363-7f545c9cead7",
                "0d8d890a-99d0-41bf-bfb9-a181eab4bb50",
                "fccad32b-9b08-42eb-8f32-37c680fe8bf3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 309,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9fc2e5f3-9c15-49bf-9d47-b35351014299",
              "title": "Add book with fake ISBN unsuccessfully",
              "fullFile": "C:\\Users\\sesko\\OneDrive\\Desktop\\demoqa\\test\\bookstore.test.js",
              "file": "\\test\\bookstore.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "with fake isbn to user favorites books list",
                  "fullTitle": "Bookstore Add book with fake ISBN unsuccessfully with fake isbn to user favorites books list",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await addBook(\n    data.userID,\n    '8888888888888',\n    userName,\n    password\n);\nassert.equal(response.status, 400, 'Status is not 400');\nassert.equal(\n    response.data.message,\n    'ISBN supplied is not available in Books Collection!',\n    'Message is not correct'\n);",
                  "err": {},
                  "uuid": "fbc75071-39c8-4cc3-911b-0581abf6b3cb",
                  "parentUUID": "9fc2e5f3-9c15-49bf-9d47-b35351014299",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fbc75071-39c8-4cc3-911b-0581abf6b3cb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 105,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a92a160c-e5a1-426c-89d9-8e3d120a96af",
              "title": "Replace book from user favorites books list",
              "fullFile": "C:\\Users\\sesko\\OneDrive\\Desktop\\demoqa\\test\\bookstore.test.js",
              "file": "\\test\\bookstore.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "with valid ISBN",
                  "fullTitle": "Bookstore Replace book from user favorites books list with valid ISBN",
                  "timedOut": false,
                  "duration": 208,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let oldBookISBN = book.isbn;\nbook = books[1];\nconst response = await replaceBook(\n    data.userID,\n    oldBookISBN,\n    book.isbn,\n    userName,\n    password\n);\ndata = response.data;\nstatus = response.status;",
                  "err": {},
                  "uuid": "07cca72f-e9d6-4bbe-84f0-7af1566b2bea",
                  "parentUUID": "a92a160c-e5a1-426c-89d9-8e3d120a96af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Book is replaced successfully",
                  "fullTitle": "Bookstore Replace book from user favorites books list Book is replaced successfully",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await getUser(userName, password, data.userId);\nassert.equal(response.status, 200, 'Status is not 200');\nassert.isArray(response.data.books, 'Data is not array');\nassert.isNotEmpty(response.data.books, 'Data is empty');\nassert.equal(response.data.books.length, 1, 'Books count is not 1');\nassert.equal(\n    response.data.books[0].isbn,\n    book.isbn,\n    'Isbn is not correct'\n);",
                  "err": {},
                  "uuid": "25970f6e-a27b-4195-bb18-111041b8bd76",
                  "parentUUID": "a92a160c-e5a1-426c-89d9-8e3d120a96af",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "07cca72f-e9d6-4bbe-84f0-7af1566b2bea",
                "25970f6e-a27b-4195-bb18-111041b8bd76"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 296,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "538ae4fd-e808-4b53-b930-b1cb9a3a0eed",
              "title": "Book with ISBN 9781491904244 has 278 pages",
              "fullFile": "C:\\Users\\sesko\\OneDrive\\Desktop\\demoqa\\test\\bookstore.test.js",
              "file": "\\test\\bookstore.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get book with ISBN 9781491904244",
                  "fullTitle": "Bookstore Book with ISBN 9781491904244 has 278 pages Get book with ISBN 9781491904244",
                  "timedOut": false,
                  "duration": 58,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await getBookByISBN('9781491904244');\nbookToCheck = response.data;\nassert.exists(bookToCheck, 'Book is not found');",
                  "err": {},
                  "uuid": "fd1c7224-ea93-42e4-8c39-261753a6d840",
                  "parentUUID": "538ae4fd-e808-4b53-b930-b1cb9a3a0eed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Book has 278 pages",
                  "fullTitle": "Bookstore Book with ISBN 9781491904244 has 278 pages Book has 278 pages",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.equal(bookToCheck.pages, 278, 'Book has not 278 pages');",
                  "err": {},
                  "uuid": "3094dd06-969e-4657-8bb5-dad25c6c3979",
                  "parentUUID": "538ae4fd-e808-4b53-b930-b1cb9a3a0eed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fd1c7224-ea93-42e4-8c39-261753a6d840",
                "3094dd06-969e-4657-8bb5-dad25c6c3979"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 59,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3ae6401d-22ec-4d4e-822a-2fbbfb75f3ac",
              "title": "Remove already added book from user favorites books list",
              "fullFile": "C:\\Users\\sesko\\OneDrive\\Desktop\\demoqa\\test\\bookstore.test.js",
              "file": "\\test\\bookstore.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Remove the book",
                  "fullTitle": "Bookstore Remove already added book from user favorites books list Remove the book",
                  "timedOut": false,
                  "duration": 204,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await deleteBook(\n    data.userId,\n    book.isbn,\n    userName,\n    password\n);\nconsole.log('stop');\nassert.equal(response.status, 204, 'Status is not 204');",
                  "err": {},
                  "uuid": "395e68ef-6761-4457-a8d0-9d2f5dd89afc",
                  "parentUUID": "3ae6401d-22ec-4d4e-822a-2fbbfb75f3ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "User favorites books list is empty",
                  "fullTitle": "Bookstore Remove already added book from user favorites books list User favorites books list is empty",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await getUser(userName, password, data.userId);\nassert.equal(response.status, 200, 'Status is not 200');\nassert.isArray(response.data.books, 'Data is not array');\nassert.isEmpty(response.data.books, 'Data is not empty');",
                  "err": {},
                  "uuid": "3d10582c-1482-41f3-848a-b5e71185cc1c",
                  "parentUUID": "3ae6401d-22ec-4d4e-822a-2fbbfb75f3ac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "395e68ef-6761-4457-a8d0-9d2f5dd89afc",
                "3d10582c-1482-41f3-848a-b5e71185cc1c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 307,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1e587db9-2b24-492f-a1a5-d409adbd7f67",
          "title": "Create user - Happy Paths",
          "fullFile": "C:\\Users\\sesko\\OneDrive\\Desktop\\demoqa\\test\\user.test.js",
          "file": "\\test\\user.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Create user - Happy Paths\"",
              "fullTitle": "Create user - Happy Paths \"before all\" hook in \"Create user - Happy Paths\"",
              "timedOut": false,
              "duration": 179,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userName = 'tsvetan-iliev' + Math.floor(Math.random() * 10000);\npassword = 'Cesc123!';\ntry {\n    const response = await createUser(userName, password);\n    data = response.data;\n    status = response.status;\n} catch (error) {\n    assert.fail('Failed to create user');\n}",
              "err": {},
              "uuid": "7ed2c4f3-72a0-4f7b-a430-b89aaaaedaf1",
              "parentUUID": "1e587db9-2b24-492f-a1a5-d409adbd7f67",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "07d57f74-f0b9-4b77-b107-ebb29c3474d1",
              "title": "Create user",
              "fullFile": "C:\\Users\\sesko\\OneDrive\\Desktop\\demoqa\\test\\user.test.js",
              "file": "\\test\\user.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Status code must be 201",
                  "fullTitle": "Create user - Happy Paths Create user Status code must be 201",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.equal(status, 201, 'Status is not 201');",
                  "err": {},
                  "uuid": "d4283327-19a9-422c-bcff-ecc5202310bc",
                  "parentUUID": "07d57f74-f0b9-4b77-b107-ebb29c3474d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Response data has property \"userId\"",
                  "fullTitle": "Create user - Happy Paths Create user Response data has property \"userId\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "assert.property(data, 'userId', 'userId property is not present');\nassert.isString(data.userId, 'userId is not string');",
                  "err": {
                    "message": "AssertionError: userId property is not present: expected { …(3) } to have property 'userId'",
                    "estack": "AssertionError: userId property is not present: expected { …(3) } to have property 'userId'\n    at Context.<anonymous> (file:///C:/Users/sesko/OneDrive/Desktop/demoqa/test/user.test.js:28:20)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "e331452d-f526-4185-8e17-b891b4ad5999",
                  "parentUUID": "07d57f74-f0b9-4b77-b107-ebb29c3474d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Response data has property \"username\"",
                  "fullTitle": "Create user - Happy Paths Create user Response data has property \"username\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.property(\n    data,\n    'username',\n    'username property is not present'\n);\nassert.isString(data.username, 'username is not string');",
                  "err": {},
                  "uuid": "9a59089a-36f3-4253-ab82-83a51228569f",
                  "parentUUID": "07d57f74-f0b9-4b77-b107-ebb29c3474d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Response data has property \"books\"",
                  "fullTitle": "Create user - Happy Paths Create user Response data has property \"books\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.property(data, 'books', 'books property is not present');\nassert.isArray(data.books, 'books is not array');",
                  "err": {},
                  "uuid": "49844bf7-aa5e-456b-ab5d-21b49f389c61",
                  "parentUUID": "07d57f74-f0b9-4b77-b107-ebb29c3474d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Created user is in the database",
                  "fullTitle": "Create user - Happy Paths Create user Created user is in the database",
                  "timedOut": false,
                  "duration": 95,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await getUser(\n    userName,\n    password,\n    data.userId || data.userID\n);\nassert.equal(response.status, 200, 'Status is not 200');\nassert.equal(response.data.username, userName, 'Username is wrong');\nassert.equal(\n    response.data.userId,\n    data.userId || data.userID,\n    'UserId is wrong'\n);",
                  "err": {},
                  "uuid": "c0023206-3be8-4a12-9045-3d76110d7893",
                  "parentUUID": "07d57f74-f0b9-4b77-b107-ebb29c3474d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d4283327-19a9-422c-bcff-ecc5202310bc",
                "9a59089a-36f3-4253-ab82-83a51228569f",
                "49844bf7-aa5e-456b-ab5d-21b49f389c61",
                "c0023206-3be8-4a12-9045-3d76110d7893"
              ],
              "failures": [
                "e331452d-f526-4185-8e17-b891b4ad5999"
              ],
              "pending": [],
              "skipped": [],
              "duration": 97,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a541ecb5-4522-488c-aa55-5fb566cd555c",
          "title": "Create user - Negative Paths",
          "fullFile": "C:\\Users\\sesko\\OneDrive\\Desktop\\demoqa\\test\\user.test.js",
          "file": "\\test\\user.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "276ded64-2254-49db-a01d-56d93103fffc",
              "title": "should not create user with existing username",
              "fullFile": "C:\\Users\\sesko\\OneDrive\\Desktop\\demoqa\\test\\user.test.js",
              "file": "\\test\\user.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return status code - 400, 404 or 406 ",
                  "fullTitle": "Create user - Negative Paths should not create user with existing username should return status code - 400, 404 or 406 ",
                  "timedOut": false,
                  "duration": 188,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userName = 'seskobg';\npassword = 'Cesc123!';\nresponse = await createUser(userName, password);\nassert.oneOf(\n    response.status,\n    [400, 404, 406],\n    'Status is not 400, 404 or 406'\n);",
                  "err": {},
                  "uuid": "5e983d2f-431e-4b3e-9f87-4abf1d25a830",
                  "parentUUID": "276ded64-2254-49db-a01d-56d93103fffc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error message",
                  "fullTitle": "Create user - Negative Paths should not create user with existing username should return error message",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.isString(response.data.message, 'Message is not string');\nassert.equal(\n    response.data.message,\n    'User exists!',\n    'Message is not \"User exists!\"'\n);",
                  "err": {},
                  "uuid": "403b006e-2f8e-41d3-81b9-4e00a5c5266a",
                  "parentUUID": "276ded64-2254-49db-a01d-56d93103fffc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return number error code ",
                  "fullTitle": "Create user - Negative Paths should not create user with existing username should return number error code ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "assert.isNumber(response.data.code, 'Code is not number');",
                  "err": {
                    "message": "AssertionError: Code is not number: expected '1204' to be a number",
                    "estack": "AssertionError: Code is not number: expected '1204' to be a number\n    at Context.<anonymous> (file:///C:/Users/sesko/OneDrive/Desktop/demoqa/test/user.test.js:91:20)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "88cd5fe3-6e83-4ded-a6fb-26759a0c3fbb",
                  "parentUUID": "276ded64-2254-49db-a01d-56d93103fffc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5e983d2f-431e-4b3e-9f87-4abf1d25a830",
                "403b006e-2f8e-41d3-81b9-4e00a5c5266a"
              ],
              "failures": [
                "88cd5fe3-6e83-4ded-a6fb-26759a0c3fbb"
              ],
              "pending": [],
              "skipped": [],
              "duration": 188,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a3522b6c-d4da-43f9-9d1e-9c591145de1e",
              "title": "should not create user with invalid data",
              "fullFile": "C:\\Users\\sesko\\OneDrive\\Desktop\\demoqa\\test\\user.test.js",
              "file": "\\test\\user.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "missing username should return status code - 400, 404 or 406 ",
                  "fullTitle": "Create user - Negative Paths should not create user with invalid data missing username should return status code - 400, 404 or 406 ",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "response = await createUser('', password);\nassert.oneOf(\n    response.status,\n    [400, 404, 406],\n    'Status is not 400, 404 or 406'\n);",
                  "err": {},
                  "uuid": "1c629a44-f922-443f-acb7-3a3e7673c054",
                  "parentUUID": "a3522b6c-d4da-43f9-9d1e-9c591145de1e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "missing username should return error message",
                  "fullTitle": "Create user - Negative Paths should not create user with invalid data missing username should return error message",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.isString(response.data.message, 'Message is not string');\nassert.equal(\n    response.data.message,\n    'UserName and Password required.',\n    'Message is not \"UserName and Password required.\"'\n);",
                  "err": {},
                  "uuid": "530c5c3d-961a-471c-afe3-9050adc9eb72",
                  "parentUUID": "a3522b6c-d4da-43f9-9d1e-9c591145de1e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "missing password should return status code - 400, 404 or 406 ",
                  "fullTitle": "Create user - Negative Paths should not create user with invalid data missing password should return status code - 400, 404 or 406 ",
                  "timedOut": false,
                  "duration": 55,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "response = await createUser(userName, '');\nassert.oneOf(\n    response.status,\n    [400, 404, 406],\n    'Status is not 400, 404 or 406'\n);",
                  "err": {},
                  "uuid": "eccd5b57-8e9d-4324-9da4-f292b3a051cc",
                  "parentUUID": "a3522b6c-d4da-43f9-9d1e-9c591145de1e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "missing password should return should return error message",
                  "fullTitle": "Create user - Negative Paths should not create user with invalid data missing password should return should return error message",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.isString(response.data.message, 'Message is not string');\nassert.equal(\n    response.data.message,\n    'UserName and Password required.',\n    'Message is not \"UserName and Password required.\"'\n);",
                  "err": {},
                  "uuid": "55ced4c4-c936-4176-8784-89eb0918a5b6",
                  "parentUUID": "a3522b6c-d4da-43f9-9d1e-9c591145de1e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid password should return status code - 400, 404 or 406 ",
                  "fullTitle": "Create user - Negative Paths should not create user with invalid data invalid password should return status code - 400, 404 or 406 ",
                  "timedOut": false,
                  "duration": 55,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "password = '123';\nresponse = await createUser(userName, password);\nassert.oneOf(\n    response.status,\n    [400, 404, 406],\n    'Status is not 400, 404 or 406'\n);",
                  "err": {},
                  "uuid": "150463ef-d1b3-40b3-81ba-0bace11c2084",
                  "parentUUID": "a3522b6c-d4da-43f9-9d1e-9c591145de1e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c629a44-f922-443f-acb7-3a3e7673c054",
                "530c5c3d-961a-471c-afe3-9050adc9eb72",
                "eccd5b57-8e9d-4324-9da4-f292b3a051cc",
                "55ced4c4-c936-4176-8784-89eb0918a5b6",
                "150463ef-d1b3-40b3-81ba-0bace11c2084"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 167,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}