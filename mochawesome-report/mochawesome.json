{
  "stats": {
    "suites": 11,
    "tests": 23,
    "passes": 21,
    "pending": 0,
    "failures": 2,
    "start": "2023-11-26T20:11:21.700Z",
    "end": "2023-11-26T20:11:24.158Z",
    "duration": 2458,
    "testsRegistered": 23,
    "passPercent": 91.30434782608695,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "cfd3d398-26f1-48a6-b007-b1f084e93d9e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "33a120d0-8464-48cb-9ce2-9596528404c4",
          "title": "Bookstore",
          "fullFile": "C:\\Users\\sesko\\OneDrive\\Desktop\\demoqa\\test\\bookstore.test.js",
          "file": "\\test\\bookstore.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ddde8cf7-359e-43a5-9c8e-0dca5e0d48cd",
              "title": "Get book, then add it successfully to user's favorites",
              "fullFile": "C:\\Users\\sesko\\OneDrive\\Desktop\\demoqa\\test\\bookstore.test.js",
              "file": "\\test\\bookstore.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Get book, then add it successfully to user's favorites\"",
                  "fullTitle": "Bookstore Get book, then add it successfully to user's favorites \"before all\" hook in \"Get book, then add it successfully to user's favorites\"",
                  "timedOut": false,
                  "duration": 668,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userName = 'tsvetan-iliev' + Math.floor(Math.random() * 100001);\npassword = 'Cesc123!';\nconst response = await createUser(userName, password);\ndata = response.data;\nstatus = response.status;",
                  "err": {},
                  "uuid": "796ebba1-0b89-4b8b-b2a4-47e40154a799",
                  "parentUUID": "ddde8cf7-359e-43a5-9c8e-0dca5e0d48cd",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get books successfully",
                  "fullTitle": "Bookstore Get book, then add it successfully to user's favorites Get books successfully",
                  "timedOut": false,
                  "duration": 61,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await getBooks();\nassert.equal(response.status, 200, 'Status is not 200');\nassert.isArray(response.data.books, 'Data is not array');\nassert.isNotEmpty(response.data.books, 'Data is empty');\nbooks = response.data.books;\nbook = books[0];",
                  "err": {},
                  "uuid": "5eebef98-02bc-4eaa-95ef-55223c6743c9",
                  "parentUUID": "ddde8cf7-359e-43a5-9c8e-0dca5e0d48cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Add book with valid isbn to user's favorites books list",
                  "fullTitle": "Bookstore Get book, then add it successfully to user's favorites Add book with valid isbn to user's favorites books list",
                  "timedOut": false,
                  "duration": 102,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const addedBookResponse = await addBook(\n    data.userID,\n    book.isbn,\n    userName,\n    password\n);\nassert.equal(addedBookResponse.status, 201, 'Status is not 201');\nassert.equal(\n    addedBookResponse.data.books[0].isbn,\n    book.isbn,\n    'Isbn is not correct'\n);",
                  "err": {},
                  "uuid": "52b791d2-2fc8-473c-baa3-374130bc2fcb",
                  "parentUUID": "ddde8cf7-359e-43a5-9c8e-0dca5e0d48cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Book is added to user favorites books list",
                  "fullTitle": "Bookstore Get book, then add it successfully to user's favorites Book is added to user favorites books list",
                  "timedOut": false,
                  "duration": 99,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await getUser(userName, password, data.userID);\nassert.equal(response.status, 200, 'Status is not 200');\nassert.isArray(response.data.books, 'Data is not array');\nassert.isNotEmpty(response.data.books, 'Data is empty');\nassert.equal(response.data.books.length, 1, 'Books count is not 1');\nassert.equal(\n    response.data.books[0].isbn,\n    book.isbn,\n    'Isbn is not correct'\n);",
                  "err": {},
                  "uuid": "0a60de0c-d709-4750-b58d-9df3b61b4a1e",
                  "parentUUID": "ddde8cf7-359e-43a5-9c8e-0dca5e0d48cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5eebef98-02bc-4eaa-95ef-55223c6743c9",
                "52b791d2-2fc8-473c-baa3-374130bc2fcb",
                "0a60de0c-d709-4750-b58d-9df3b61b4a1e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 262,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "50574e9f-c0d8-40e3-9131-6f8cd1425486",
              "title": "Add book with fake ISBN unsuccessfully",
              "fullFile": "C:\\Users\\sesko\\OneDrive\\Desktop\\demoqa\\test\\bookstore.test.js",
              "file": "\\test\\bookstore.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "with fake isbn to user favorites books list",
                  "fullTitle": "Bookstore Add book with fake ISBN unsuccessfully with fake isbn to user favorites books list",
                  "timedOut": false,
                  "duration": 98,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await addBook(\n    data.userID,\n    '8888888888888',\n    userName,\n    password\n);\nassert.equal(response.status, 400, 'Status is not 400');\nassert.equal(\n    response.data.message,\n    'ISBN supplied is not available in Books Collection!',\n    'Message is not correct'\n);",
                  "err": {},
                  "uuid": "db1798ff-a928-446e-9836-400a53587461",
                  "parentUUID": "50574e9f-c0d8-40e3-9131-6f8cd1425486",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "db1798ff-a928-446e-9836-400a53587461"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 98,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7e43aab8-7419-4891-9dd1-8d46b5256478",
              "title": "Replace book from user favorites books list",
              "fullFile": "C:\\Users\\sesko\\OneDrive\\Desktop\\demoqa\\test\\bookstore.test.js",
              "file": "\\test\\bookstore.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "with valid ISBN",
                  "fullTitle": "Bookstore Replace book from user favorites books list with valid ISBN",
                  "timedOut": false,
                  "duration": 271,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let oldBookISBN = book.isbn;\nbook = books[1];\nconst response = await replaceBook(\n    data.userID,\n    oldBookISBN,\n    book.isbn,\n    userName,\n    password\n);\ndata = response.data;\nstatus = response.status;",
                  "err": {},
                  "uuid": "7a17539d-1d41-4b8d-9f06-c372c3651d76",
                  "parentUUID": "7e43aab8-7419-4891-9dd1-8d46b5256478",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Book is replaced successfully",
                  "fullTitle": "Bookstore Replace book from user favorites books list Book is replaced successfully",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await getUser(userName, password, data.userId);\nassert.equal(response.status, 200, 'Status is not 200');\nassert.isArray(response.data.books, 'Data is not array');\nassert.isNotEmpty(response.data.books, 'Data is empty');\nassert.equal(response.data.books.length, 1, 'Books count is not 1');\nassert.equal(\n    response.data.books[0].isbn,\n    book.isbn,\n    'Isbn is not correct'\n);",
                  "err": {},
                  "uuid": "3df4bb46-d067-4f90-b7cb-e6dc399c15dc",
                  "parentUUID": "7e43aab8-7419-4891-9dd1-8d46b5256478",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a17539d-1d41-4b8d-9f06-c372c3651d76",
                "3df4bb46-d067-4f90-b7cb-e6dc399c15dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 374,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1cc880c8-aa56-4d5c-8bad-dcc72b30e3f1",
              "title": "Book with ISBN 9781491904244 has 278 pages",
              "fullFile": "C:\\Users\\sesko\\OneDrive\\Desktop\\demoqa\\test\\bookstore.test.js",
              "file": "\\test\\bookstore.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get book with ISBN 9781491904244",
                  "fullTitle": "Bookstore Book with ISBN 9781491904244 has 278 pages Get book with ISBN 9781491904244",
                  "timedOut": false,
                  "duration": 63,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await getBookByISBN('9781491904244');\nbookToCheck = response.data;\nassert.exists(bookToCheck, 'Book is not found');",
                  "err": {},
                  "uuid": "e835f0e7-de59-4490-803b-674b7ebcd9e0",
                  "parentUUID": "1cc880c8-aa56-4d5c-8bad-dcc72b30e3f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Book has 278 pages",
                  "fullTitle": "Bookstore Book with ISBN 9781491904244 has 278 pages Book has 278 pages",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.equal(bookToCheck.pages, 278, 'Book has not 278 pages');",
                  "err": {},
                  "uuid": "e4abb935-7ad7-4980-bbb7-8e264f496b19",
                  "parentUUID": "1cc880c8-aa56-4d5c-8bad-dcc72b30e3f1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e835f0e7-de59-4490-803b-674b7ebcd9e0",
                "e4abb935-7ad7-4980-bbb7-8e264f496b19"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 63,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "42de5522-2690-4cec-a07f-fec2f2a731a6",
              "title": "Remove already added book from user favorites books list",
              "fullFile": "C:\\Users\\sesko\\OneDrive\\Desktop\\demoqa\\test\\bookstore.test.js",
              "file": "\\test\\bookstore.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Remove the book",
                  "fullTitle": "Bookstore Remove already added book from user favorites books list Remove the book",
                  "timedOut": false,
                  "duration": 207,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await deleteBook(\n    data.userId,\n    book.isbn,\n    userName,\n    password\n);\nconsole.log('stop');\nassert.equal(response.status, 204, 'Status is not 204');",
                  "err": {},
                  "uuid": "fe153b1f-ef7a-48bf-a67c-60aadbf93ae1",
                  "parentUUID": "42de5522-2690-4cec-a07f-fec2f2a731a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "User favorites books list is empty",
                  "fullTitle": "Bookstore Remove already added book from user favorites books list User favorites books list is empty",
                  "timedOut": false,
                  "duration": 98,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await getUser(userName, password, data.userId);\nassert.equal(response.status, 200, 'Status is not 200');\nassert.isArray(response.data.books, 'Data is not array');\nassert.isEmpty(response.data.books, 'Data is not empty');",
                  "err": {},
                  "uuid": "870ff7e1-30bf-4379-bec4-7bf8bb45e1d9",
                  "parentUUID": "42de5522-2690-4cec-a07f-fec2f2a731a6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe153b1f-ef7a-48bf-a67c-60aadbf93ae1",
                "870ff7e1-30bf-4379-bec4-7bf8bb45e1d9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 305,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a9298efd-7db6-4082-9a51-a29631596442",
          "title": "Create user - Happy Path",
          "fullFile": "C:\\Users\\sesko\\OneDrive\\Desktop\\demoqa\\test\\user.test.js",
          "file": "\\test\\user.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Create user - Happy Path\"",
              "fullTitle": "Create user - Happy Path \"before all\" hook in \"Create user - Happy Path\"",
              "timedOut": false,
              "duration": 198,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userName = 'tsvetan-iliev' + Math.floor(Math.random() * 10000);\npassword = 'Cesc123!';\ntry {\n    const response = await createUser(userName, password);\n    data = response.data;\n    status = response.status;\n} catch (error) {\n    assert.fail('Failed to create user');\n}",
              "err": {},
              "uuid": "910961cf-e2b6-4ca9-a18c-731d6f14911b",
              "parentUUID": "a9298efd-7db6-4082-9a51-a29631596442",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e932f228-28d2-4838-9366-4b67503d1af2",
              "title": "Create user successfully",
              "fullFile": "C:\\Users\\sesko\\OneDrive\\Desktop\\demoqa\\test\\user.test.js",
              "file": "\\test\\user.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Status code must be 201",
                  "fullTitle": "Create user - Happy Path Create user successfully Status code must be 201",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.equal(status, 201, 'Status is not 201');",
                  "err": {},
                  "uuid": "2ddf3d68-bffd-4715-9112-f45d7ece5ef0",
                  "parentUUID": "e932f228-28d2-4838-9366-4b67503d1af2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Response object has property \"userId\"",
                  "fullTitle": "Create user - Happy Path Create user successfully Response object has property \"userId\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "assert.property(data, 'userId', 'userId property is not present');\nassert.isString(data.userId, 'userId is not string');",
                  "err": {
                    "message": "AssertionError: userId property is not present: expected { …(3) } to have property 'userId'",
                    "estack": "AssertionError: userId property is not present: expected { …(3) } to have property 'userId'\n    at Context.<anonymous> (file:///C:/Users/sesko/OneDrive/Desktop/demoqa/test/user.test.js:28:20)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "7fcf98dd-4372-40ce-a766-6c18a1a0342d",
                  "parentUUID": "e932f228-28d2-4838-9366-4b67503d1af2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Response object has property \"username\"",
                  "fullTitle": "Create user - Happy Path Create user successfully Response object has property \"username\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.property(\n    data,\n    'username',\n    'username property is not present'\n);\nassert.isString(data.username, 'username is not string');",
                  "err": {},
                  "uuid": "a7ab2034-a92b-4e5a-b8ba-805d476b3979",
                  "parentUUID": "e932f228-28d2-4838-9366-4b67503d1af2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Response object has property \"books\"",
                  "fullTitle": "Create user - Happy Path Create user successfully Response object has property \"books\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.property(data, 'books', 'books property is not present');\nassert.isArray(data.books, 'books is not array');",
                  "err": {},
                  "uuid": "65606d4f-8eba-4f9b-ad97-4907cd13107f",
                  "parentUUID": "e932f228-28d2-4838-9366-4b67503d1af2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Created user is in the database",
                  "fullTitle": "Create user - Happy Path Create user successfully Created user is in the database",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await getUser(\n    userName,\n    password,\n    data.userId || data.userID\n);\nassert.equal(response.status, 200, 'Status is not 200');\nassert.equal(response.data.username, userName, 'Username is wrong');\nassert.equal(\n    response.data.userId,\n    data.userId || data.userID,\n    'UserId is wrong'\n);",
                  "err": {},
                  "uuid": "46cfb4dd-b538-4c96-a158-871785e91b8c",
                  "parentUUID": "e932f228-28d2-4838-9366-4b67503d1af2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ddf3d68-bffd-4715-9112-f45d7ece5ef0",
                "a7ab2034-a92b-4e5a-b8ba-805d476b3979",
                "65606d4f-8eba-4f9b-ad97-4907cd13107f",
                "46cfb4dd-b538-4c96-a158-871785e91b8c"
              ],
              "failures": [
                "7fcf98dd-4372-40ce-a766-6c18a1a0342d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 108,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9086c6bb-f038-403f-af22-033f6db87866",
          "title": "Create user - validate errors",
          "fullFile": "C:\\Users\\sesko\\OneDrive\\Desktop\\demoqa\\test\\user.test.js",
          "file": "\\test\\user.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "80bc9721-ed3a-4f5f-83cf-caa3c3b909bb",
              "title": "Should not create user with existing username",
              "fullFile": "C:\\Users\\sesko\\OneDrive\\Desktop\\demoqa\\test\\user.test.js",
              "file": "\\test\\user.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return status code - 400, 404 or 406 ",
                  "fullTitle": "Create user - validate errors Should not create user with existing username should return status code - 400, 404 or 406 ",
                  "timedOut": false,
                  "duration": 179,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userName = 'seskobg';\npassword = 'Cesc123!';\nresponse = await createUser(userName, password);\nassert.oneOf(\n    response.status,\n    [400, 404, 406],\n    'Status is not 400, 404 or 406'\n);",
                  "err": {},
                  "uuid": "9063ef5c-4147-4951-94d4-ee96d8e0c285",
                  "parentUUID": "80bc9721-ed3a-4f5f-83cf-caa3c3b909bb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error message",
                  "fullTitle": "Create user - validate errors Should not create user with existing username should return error message",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.isString(response.data.message, 'Message is not string');\nassert.equal(\n    response.data.message,\n    'User exists!',\n    'Message is not \"User exists!\"'\n);",
                  "err": {},
                  "uuid": "d1f4ac85-e9ac-4788-bf24-a63c9c1747ff",
                  "parentUUID": "80bc9721-ed3a-4f5f-83cf-caa3c3b909bb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return number error code ",
                  "fullTitle": "Create user - validate errors Should not create user with existing username should return number error code ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "assert.isNumber(response.data.code, 'Code is not number');",
                  "err": {
                    "message": "AssertionError: Code is not number: expected '1204' to be a number",
                    "estack": "AssertionError: Code is not number: expected '1204' to be a number\n    at Context.<anonymous> (file:///C:/Users/sesko/OneDrive/Desktop/demoqa/test/user.test.js:91:20)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "a577a034-a1e9-46b7-b685-55137bd29adb",
                  "parentUUID": "80bc9721-ed3a-4f5f-83cf-caa3c3b909bb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9063ef5c-4147-4951-94d4-ee96d8e0c285",
                "d1f4ac85-e9ac-4788-bf24-a63c9c1747ff"
              ],
              "failures": [
                "a577a034-a1e9-46b7-b685-55137bd29adb"
              ],
              "pending": [],
              "skipped": [],
              "duration": 180,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5b826c1a-5e5a-4a67-bae3-b65000adb4fb",
              "title": "should not create user with invalid data",
              "fullFile": "C:\\Users\\sesko\\OneDrive\\Desktop\\demoqa\\test\\user.test.js",
              "file": "\\test\\user.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "missing username should return status code - 400, 404 or 406 ",
                  "fullTitle": "Create user - validate errors should not create user with invalid data missing username should return status code - 400, 404 or 406 ",
                  "timedOut": false,
                  "duration": 56,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "response = await createUser('', password);\nassert.oneOf(\n    response.status,\n    [400, 404, 406],\n    'Status is not 400, 404 or 406'\n);",
                  "err": {},
                  "uuid": "a5a8ef84-bbcc-4159-9255-83efaa8e0699",
                  "parentUUID": "5b826c1a-5e5a-4a67-bae3-b65000adb4fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "missing username should return error message",
                  "fullTitle": "Create user - validate errors should not create user with invalid data missing username should return error message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.isString(response.data.message, 'Message is not string');\nassert.equal(\n    response.data.message,\n    'UserName and Password required.',\n    'Message is not \"UserName and Password required.\"'\n);",
                  "err": {},
                  "uuid": "d1fda35f-a7de-424f-974d-5e8f435b4e4d",
                  "parentUUID": "5b826c1a-5e5a-4a67-bae3-b65000adb4fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "missing password should return status code - 400, 404 or 406 ",
                  "fullTitle": "Create user - validate errors should not create user with invalid data missing password should return status code - 400, 404 or 406 ",
                  "timedOut": false,
                  "duration": 55,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "response = await createUser(userName, '');\nassert.oneOf(\n    response.status,\n    [400, 404, 406],\n    'Status is not 400, 404 or 406'\n);",
                  "err": {},
                  "uuid": "aa5c9b48-1a85-4a1a-8779-7c793ebb2364",
                  "parentUUID": "5b826c1a-5e5a-4a67-bae3-b65000adb4fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "missing password should return should return error message",
                  "fullTitle": "Create user - validate errors should not create user with invalid data missing password should return should return error message",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.isString(response.data.message, 'Message is not string');\nassert.equal(\n    response.data.message,\n    'UserName and Password required.',\n    'Message is not \"UserName and Password required.\"'\n);",
                  "err": {},
                  "uuid": "4373c77f-c052-4c06-8f5e-2947705c446f",
                  "parentUUID": "5b826c1a-5e5a-4a67-bae3-b65000adb4fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid password should return status code - 400, 404 or 406 ",
                  "fullTitle": "Create user - validate errors should not create user with invalid data invalid password should return status code - 400, 404 or 406 ",
                  "timedOut": false,
                  "duration": 58,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "password = '123';\nresponse = await createUser(userName, password);\nassert.oneOf(\n    response.status,\n    [400, 404, 406],\n    'Status is not 400, 404 or 406'\n);",
                  "err": {},
                  "uuid": "816af558-5c42-49b4-929f-12f830d26200",
                  "parentUUID": "5b826c1a-5e5a-4a67-bae3-b65000adb4fb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a5a8ef84-bbcc-4159-9255-83efaa8e0699",
                "d1fda35f-a7de-424f-974d-5e8f435b4e4d",
                "aa5c9b48-1a85-4a1a-8779-7c793ebb2364",
                "4373c77f-c052-4c06-8f5e-2947705c446f",
                "816af558-5c42-49b4-929f-12f830d26200"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 170,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}